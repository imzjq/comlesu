<?php
namespace api\controllers;

use common\lib\Utils;
use common\models\NodeRemark;
use Yii;

use api\models\ApiModel;
use common\models\PingTmp;
//use console\models\CommonTrait;
/**
 * Site controller
 */
class SiteController extends BaseController
{

   // use CommonTrait;
    //定义token,说明其对应的动作
    public $node_status_token = '65034034aad1f21923748935fd6562c9';
    public $node_flow_token = 'f9e81005627f0522c6b2f1836e0e003b';
    public $node_ping_token = '6ee9c21209eb14002b480a9337f8c92f';
    public $node_ping_n_token = '17e5a0c488f3af723fd5f33b8d2e5fb8';
    public $node_ip_token = '293b1e12797399608717b3c1f3f82e8c';
    public $node_remark_token = '467acdf76cec3d7a76b6b387619f4e2d';

    public $arr_token = [

    ];
    public $arr_status = array(0,1); //zabbix 状态 0或1

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->arr_token = [
            $this->node_status_token, //md5(node_status) zabbix 监听各个节点的状态，参数有ip，alive_z_1,status  状态值1或0 update lc_node
            $this->node_flow_token,//md5(node_flow) zabbix 监听各个节点的信息（流量，cpu,内存）参数：ip,flow,cpu,memory update lc_node
            $this->node_ping_token,//md5(node_ping) ping.php
            $this->node_ping_n_token,//md5(node_ping_n) ping_n.php
            $this->node_ip_token, //ip.php
            $this->node_remark_token, //md5(node_remark)
        ];
    }

    /**
     * zbbbix
     *
     * @return mixed
     */
    public function actionZabbix()
    {
        if(Yii::$app->request->isPost){
            $token = Yii::$app->request->post('token','');
            $ip = Yii::$app->request->post('ip','');
            $checkIp = Utils::isIp($ip);
            $res = true;
            if(!$checkIp){

                //$this->zabbixLog('ip格式错误,ip: '.$ip);
                self::recordLog('ip格式错误,ip: '.$ip);
                return $this->error('ip格式错误');
            }

            //zabbix 监听各个节点的状态，参数有ip，alive_z_1,status  状态值1或0 update lc_node
            if($token===$this->node_status_token && $ip){
                $alive_z_1 = Yii::$app->request->post('alive_z_1','');
                $alive_z_2 = Yii::$app->request->post('alive_z_2','');
                $checkIp = Utils::isIp($ip);
                if($checkIp && in_array($alive_z_1,$this->arr_status)){
                    $res = ApiModel::change_node_status($ip,$alive_z_1,1);
                }elseif ($checkIp &&  in_array($alive_z_2,$this->arr_status)){
                    $res = ApiModel::change_node_status($ip,$alive_z_2,2);
                }else{
                    $res = 'zabbix 接口参数错误';
                }
                self::recordLog($res);
               // $this->zabbixLog($res);
                return $this->success();
            }

            //zabbix cpu memory flow
            if($token===$this->node_flow_token && $ip){
                $flow = Yii::$app->request->post('flow','');
                //$cpu = Yii::$app->request->post('cpu','');
              //  $memory = Yii::$app->request->post('memory','');
                $checkIp = Utils::isIp($ip);

                if($checkIp && $flow ){
                    $res = ApiModel::change_node_data($ip,$flow);
                }
                if($res!==true){
                    self::recordLog($res);
                }
                return $this->success();
            }
        }
        return $this->error();
    }


    /***
     * 节点备注 修改密码
     * @return array
     */
    public function actionNodeRemark(){

        if(Yii::$app->request->isPost){
            $id = Yii::$app->request->post('id','');
            $password = Yii::$app->request->post('password','');
            $token = Yii::$app->request->post('token','');
            if(empty($id)||empty($password)||empty($token))
                return $this->error("data error");
           if($token != $this->node_remark_token)
               return $this->error("token error");
           $model =  NodeRemark::find()->where(['node_id'=>$id])->one();
           if($model){
               $model->password = $password;
               if($model->validate())
               {
                   if($model->save()){
                       return $this->success();
                   }
               }
           }
            $err = $model->getErrors();
            $firstError = array_shift($err);
            self::recordLog($firstError);
        }
    }

    public function actionPing(){
        if(Yii::$app->request->isPost){
            $ping_ip = Yii::$app->request->post('ping_ip','');
            $node_id = Yii::$app->request->post('node_id','');
            $group_id = Yii::$app->request->post('group_id');
            $MS = Yii::$app->request->post('MS','');
            $data['ping_ip'] = $ping_ip;
            $data['node_id'] = $node_id;
            $data['group_id'] = $group_id;
            $data['MS'] = $MS;

            $model = new PingTmp();
            if($model->load($data,'') && $model->validate()){
                if($model->save()){
                    return $this->success();
                }
                $err = $model->getErrors();
                $firstError = array_shift($err);
                self::recordLog($firstError);
            }
        }
    }



}
