<?php
/**
 * Created by PhpStorm.
 * User: admin
 * Date: 2018/11/23
 * Time: 20:06
 */

namespace frontend\models;

use backend\models\Node;
use common\lib\Utils;
use common\models\CodeNum;
use common\models\Ddos;
use common\models\DefenceRemap;
use common\models\DomainCodeNum;
use common\models\Flow as CommonFlow;
use common\models\IpdatabaseSimplify;
use common\models\Remap;
use Yii;
use yii\helpers\ArrayHelper;

class Flow extends CommonFlow
{
    use ApiTrait;
    protected $dateFrom; //开始时间
    protected $dateTo;
    public $unit = 3600; //单位
    public $conn;

    public $i = 0;
    public $did = 0;  //用户id
    public $xData; //x轴数据
    public $yData; //y轴数据
    protected $type; //普通或者高防

    public $multiple = 1.4; //计算流量带宽的倍数

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->dateFrom = strtotime("today")-60*60*24*7;
        $this->dateTo = floor(time()/300)*300;
        $this->conn = Yii::$app->db;
    }

    //流量查询
    public function flowStat($post){
        $this->param($post);
        $totalFlow = 0;
        $date = [date('Y-m-d',$this->dateFrom),date('Y-m-d',$this->dateTo)];
        if(!$this->did){
            for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){
                array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));
                array_push($this->yData,0);
            }
            return $datas = [
                'xData'=>$this->xData,
                'yData'=>$this->yData,
                'totalFlow'=>'总流量:'.$totalFlow.'(MB)', //总流量
                'title'=>'流量',
                'date'=>$date,
            ];
        }

        if(!is_array($this->did)){
            $did = explode(',',$this->did);
        }else{
            $did = $this->did;
        }
//        if($this->type ==1){
//            //普通流量计算
            $flowModel = new Flow();
//        }else{
//            $flowModel = new FlowGf();
//        }
        $info  = [];
        if($did)
         $info = $flowModel::find()->where(['between','intime',$this->dateFrom,$this->dateTo])->andWhere(['did'=>$did])->andWhere(['type'=>$this->type])->select('sum(flow) as flows,intime')->asArray()->groupBy('intime')->all();

        $time_flow = [];
        if($info){
            foreach ($info as $v) {
                $time_flow[$v['intime']] = $v['flows'];
            }
            unset($info);
        }

        for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){
            array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));
            if(isset($time_flow[$this->dateFrom])){
                $flow = $time_flow[$this->dateFrom];
            }else{
                $flow = 0;
            }

            $totalFlow +=$flow;
            array_push($this->yData,$flow);
        }
        return $datas = [
            'xData'=>$this->xData,
            'yData'=>$this->yData,
            'totalFlow'=>'总流量:'.$this->roundData($totalFlow).'(MB)', //总流量
            'title'=>'流量查询',
            'date'=>$date,
        ];

    }

    //带宽查询
    public function bandwidth($post){
        $this->param($post);
        $pV = 0; //第四峰值
        $date = [date('Y-m-d',$this->dateFrom),date('Y-m-d',$this->dateTo)];
        if(!$this->did){
            for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){
                array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));
                array_push($this->yData,0);
            }
            return $datas = [
                'xData'=>$this->xData,
                'yData'=>$this->yData,
                'pV'=>'当前的第四峰值:'.$pV.'Mb/s',
                'title'=>'流量',
                'date'=>$date,
            ];
        }

        if(!is_array($this->did)){
            $did = explode(',',$this->did);
        }else{
            $did = $this->did;
        }

//        if($this->type ==1){
            //普通流量计算
            $flowModel = new Flow();
//        }else{
//            $flowModel = new FlowGf();
//        }
        $bwRow  = [];
        if($did)
        $bwRow = $flowModel::find()->where(['between','intime',$this->dateFrom,$this->dateTo])->andWhere(['did'=>$did])->andWhere(['type'=>$this->type])->select('sum(flow) as flows,intime')->asArray()->groupBy('intime')->all();
        $bw = [];
        $bw_c = [];
        if($bwRow){
            foreach ($bwRow as $v) {
                $bw[$v['intime']] = $v['flows'];
            }
        }

        for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){
            array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));

            if(isset($bw[$this->dateFrom])){
                $total = $this->roundData($bw[$this->dateFrom]/300*8);

            }else{
                $total = 0;
            }
            if($total !=0 or !empty($bw_c)){
                $bw_c[]=$total;
            }
            array_push($this->yData,$total);
        }
        if (is_array($bw_c) && !empty($bw_c)) {
            rsort($bw_c);
            //$sum = count($bw_c);
            //$bw_ = floor($sum * 0.05);
            //$bw_charging = $bw_c[$bw_];
            $pV = $bw_c[3];
        }
        return $datas = [
            'xData'=>$this->xData,
            'yData'=>$this->yData,
            'pV'=>'当前的第四峰值:'.$pV.'Mb/s',
            'title'=>'带宽',
            'date'=>$date,
        ];
    }


    //点击量查询
    public function hit($post){
        $this->param($post);
        $totalHit = 0;
        $date = [date('Y-m-d',$this->dateFrom),date('Y-m-d',$this->dateTo)];
        if(!$this->did){
            for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){
                array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));
                array_push($this->yData,0);
            }
            return $datas = [
                'xData'=>$this->xData,
                'yData'=>$this->yData,
                'totalHit'=>'总请求:'.$totalHit, //
                'title'=>'请求数',
                'date'=>$date,
            ];
        }

        if(!is_array($this->did)){
            $did = explode(',',$this->did);
        }else{
            $did = $this->did;
        }
        $flowModel = new Flow();
        $info = [];
        if($did)
         $info = $flowModel::find()->where(['between','intime',$this->dateFrom,$this->dateTo])->andWhere(['did'=>$did])->andWhere(['type'=>$this->type])->select('sum(hit) as hits,intime')->asArray()->groupBy('intime')->all();

        $time_hit = [];
        if($info){
            foreach ($info as $v) {
                $time_hit[$v['intime']] = $v['hits'];
            }
        }

        for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){
            array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));
            if(isset($time_hit[$this->dateFrom])){
                $hit = $time_hit[$this->dateFrom];
            }else{
                $hit = 0;
            }

            $totalHit +=$hit;
            array_push($this->yData,$hit);
        }
        return $datas = [
            'xData'=>$this->xData,
            'yData'=>$this->yData,
            'totalHit'=>'总请求:'.$totalHit, //
            'title'=>'请求数',
            'date'=>$date,
        ];

    }


    public function log($post)
    {
        $page = $post['page'];
        $pagenum = $post['limit'];
        if(empty($pagenum)){
            $pagenum = $this->pagenum;
        }
        $offset = 0;
        if(!empty($page) && is_numeric($page) && $page > 1){
            $offset = ($page-1) * $pagenum;
        }else{
            $page = 1;
        }

        $did = $post['did'];
        $time = $post['time'];
        if(empty($did) || empty($time))
        {
            return $this->error('请选择条件');
        }
        $where = [];
        if($did)
        {
            $where[] = ['did'=>$did];
        }
        if($time)
        {
            $where[] = ['>=','date',$time[0]];
            $where[] = ['<=','date',$time[1]];
        }

        $model = new DomainCodeNum();
        $list = $model::find();
        if(!empty($where)){
            $i = 0;
            foreach ($where as $k=>$v){
                if($i==0){
                    $list->where($v);
                }else{
                    $list->andWhere($v);
                }
                $i++;
            }
        }
        $count = $list->count();  //总条数
        //总页数
        $allpage = 1;
        $datas = [];
        if($page <= $allpage){
            $list->offset($offset)->limit($pagenum);
            $datas = $list->all();
        }

        //数据列表
        $result['page'] = (int)$page; //当前页码
        $result['count']= intval($count); //总条数
        $result['allpage'] = (int)$allpage ;
        $result['datas'] = $datas;
        return $this->success($result);
    }

    public function dns($post)
    {

        $did = isset($post['did']) ? $post['did'] : '' ;
        $time = $post['time'];
        if(empty($did) || empty($time))
        {
            return $this->error('请选择条件');
        }

        $sql = "select ip from  {{%white_list}} WHERE ";
        if($did)
        {
            $cname = self::_get_dname_cname($did);
           $sql .="dns = '".$cname."'";
           // $sql .="dns = '24cdn.dnsunions.com'";
        }

        if($time)
        {
            $sql .= " AND intime BETWEEN '".date('Y-m-d H:i:s',strtotime($time[0]))."' AND '".date('Y-m-d H:i:s',strtotime($time[1])+86399 )."'";
        }


        $result_val = array();
        $result_sf_val = array();
        $result_yy_val = array();
        $result_sf_key = array();
        $result_key = array();
        $result_yy_key = array();

        $db = $this->conn;
        $res = array();
            $datas = $db->createCommand($sql)->queryAll();

            if($datas)
            {
                $ipdate = new IpdatabaseSimplify();
                foreach ($datas as $val)
                {

                    $tmp = array();
                    $ip = $val['ip'];
                    $ip_info =  $ipdate->checkGroup($ip);

                    if($ip_info===false){
                        continue;
                    }

                    $tmp['ip'] = $ip;
                    $tmp['country'] = $ip_info['country'];
                    $tmp['province'] = $ip_info['province'];
                    $tmp['city'] = $ip_info['city'];
                    $tmp['service'] = $ip_info['service'];
                    $res [] = $tmp;
                }
                unset($datas);


                $result = array();
                $result_sf = array();
                $result_yy = array();
                array_walk_recursive($res, function($value,$key) use(&$result){
                    if ($key == 'country') {
                        if(!$value){
                            $value = '未知';
                        }
                        if(isset($result[$value]))
                        $result[$value] += 1;
                        else
                          $result[$value] = 1;
                    }

                });

                array_walk_recursive($res, function($value,$key) use(&$result_sf){
                    if ($key == 'province') {
                        if(!$value){
                            $value = '未知';
                        }
                        if(isset($result_sf[$value]))
                        $result_sf[$value] += 1;
                        else
                            $result_sf[$value] = 1;
                    }

                });

                array_walk_recursive($res, function($value,$key) use(&$result_yy){
                    if ($key == 'city') {
                        if(!$value){
                            $value = '未知';
                        }
                        if(isset($result_yy[$value]))
                            $result_yy[$value] += 1;
                        else
                            $result_yy[$value] = 1;
                    }

                });

                foreach($result as $k=>$v){
                    $result_key [] =$k;
                    $tmp = array();
                    $tmp['value'] = $v;
                    $tmp['name'] = $k;

                    $result_val[] = $tmp;

                }

                foreach($result_sf as $k=>$v){
                    $result_sf_key [] = $k;
                    if($k=='未知'){
                        continue;
                    }
                    $tmp = array();
                    $tmp['value'] = $v;
                    $tmp['name'] = $k;

                    $result_sf_val[] = $tmp;

                }

                foreach($result_yy as $k=>$v){
                    $result_yy_key []= $k;
                    if($k=='未知'){
                        continue;
                    }
                    $tmp = array();
                    $tmp['value'] = $v;
                    $tmp['name'] = $k;

                    $result_yy_val[] = $tmp;
                }
            }

//     var_dump($result_yy_key);exit;
//
//            echo "<pre>";
//        var_dump($result_val);
//        echo "</pre>";
//        echo "<pre>";
//        var_dump($result_sf_val);
//        echo "</pre>";
//        echo "<pre>";
//        var_dump($result_yy_val);
//        echo "</pre>";
//        exit;

        //数据列表

        $result['country'] =$result_val ;
        $result['country_key'] =$result_key ;
        $result['province'] =$result_sf_val ;
        $result['province_key'] =$result_sf_key;
        $result['city'] =$result_yy_val ;
        $result['city_key'] =$result_yy_key;
        return $this->success($result);
    }


    public function api($post)
    {
        $time = $post['time'];
        if($time){
            $this->dateFrom = floor(strtotime($time[0])*300)/300;
            $this->dateTo = floor(strtotime($time[1])*300)/300 + 86400 ;
        }

            $this->unit = 300;

        //先组合x轴数据， 时间点
        $this->xData = [];
        $this->yData = [];

        $did =  $post['did'];
        if($did) {
            $didArr = explode("_",$did);
            $this->did = $didArr[0]; //域名ID， 如果是高防，则是defenceid
            $this->type  =$didArr[1];
        }




        if(!$this->did){
            for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){
                array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));
                array_push($this->yData,0);
            }

            return $datas = [
                'xData'=>$this->xData,
                'yData'=>$this->yData,
                'title'=>'流量',
            ];
        }


            $did = $this->did;

        $flowModel = new CodeNum();

        $info  = [];
        $info_code = [];
        if($did)
            $info = $flowModel::find()->where(['between', 'intime', $this->dateFrom, $this->dateTo])->andWhere(['did' => $did])->andWhere(['type' => $this->type])->select('num,intime,code')->asArray()->all();


        $time_flow = [];
        if($info){
            foreach ($info as $v) {
                $time_flow[$v['intime']] [$v['code']] = (int)$v['num'];
                if(!in_array($v['code'],$info_code))
                    $info_code[] = $v['code'];
            }
            unset($info);
        }

//        for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){
//            array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));
//            if(isset($time_flow[$this->dateFrom])){
//                foreach ($info_code as $i_code)
//                {
//                    foreach ($time_flow[$this->dateFrom] as $k_code =>$t_code)
//                    {
//                        if($i_code == $k_code)
//                        {
//                            $this->yData[$i_code][$this->dateFrom] = $t_code ;
//                        }else{
//                            $this->yData[$i_code][$this->dateFrom]   = 0 ;
//                        }
//                    }
//                }
////                foreach ($time_flow[$this->dateFrom] as $val)
////                {
////                    $this->yData[$this->dateFrom][$val['code']] =$val['num'];
////                }
//                //$flow = $time_flow[$this->dateFrom];
//            }else{
//
//            }
//           // array_push($this->yData,$flow);
//        }


        $i = 0;
        $temp_dataForm = $this->dateFrom;
        foreach ($info_code as $info_val){
            $this->yData[$info_val] = [];
            for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){

                if($i == 0)
                array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));

                if(isset($time_flow[$this->dateFrom]))
                {
                    if(isset($time_flow[$this->dateFrom][$info_val]))
                    {
                        array_push($this->yData[$info_val],$time_flow[$this->dateFrom][$info_val]);
                    }else{
                        array_push($this->yData[$info_val],0);
                    }
                }else{
                    array_push($this->yData[$info_val],0);
                    //$this->yData[$info_val][$this->dateFrom];
                }
            }
            $this->dateFrom = $temp_dataForm;

            $i++;
        }

       // var_dump($this->xData);
      //  var_dump($this->yData);

        return $datas = [
            'xData'=>$this->xData,
            'yData'=>$this->yData,

        ];

    }


    //todo flow需要添加用户标识
    public function time($post)
    {

        $db = $this->conn;

        $res = [];
        $size = array();

        $beginTime_lm = strtotime(date('Y-m-01', strtotime('-1 month')));
        $endTime_lm = strtotime(date('Y-m-t', strtotime('-1 month')));

        $beginTime_m = strtotime(date("Y-m-01"));
        $endTime_m = floor(time() / 300) * 300;

        $beginTime_w = strtotime("today") - 60 * 60 * 24 * 7;
        $endTime_w = floor(time() / 300) * 300;

        $beginTime_d = strtotime("today");
        $endTime_d = floor(time() / 300) * 300;

        if(!empty($post['keywords'])){

            $site = $post['keywords'];
            $sql_1 = "select sum(flow) from lc_flow where intime<'$endTime_lm' and intime>='$beginTime_lm' and site = '$site'";
            $rows_1 = $db->createCommand($sql_1)->queryOne();

            $sumflow_lm = $rows_1['sum(flow)'];

            $beginTime_m = strtotime(date("Y-m-01"));
            $endTime_m = floor(time() / 300) * 300;
            $sql_1 = "select sum(flow) from lc_flow where intime<'$endTime_m' and intime>='$beginTime_m' and site = '$site'";
            $rows_1 = $db->createCommand($sql_1)->queryOne();

            $sumflow_m = $rows_1['sum(flow)'];


           // $beginTime_w = strtotime("today") - 60 * 60 * 24 * 7;
            $beginTime_w = strtotime("today") - 604800 ;
            $endTime_w = floor(time() / 300) * 300;
            $sql_1 = "select sum(flow) from lc_flow where intime<'$endTime_w' and intime>='$beginTime_w' and site = '$site'";
            $rows_1 = $db->createCommand($sql_1)->queryOne();

            $sumflow_w = $rows_1['sum(flow)'];

            $beginTime_d = strtotime("today");
            $endTime_d = floor(time() / 300) * 300;
            $sql_1 = "select sum(flow) from lc_flow where intime<'$endTime_d' and intime>='$beginTime_d' and site = '$site'";
            $rows_1 = $db->createCommand($sql_1)->queryOne();

            $sumflow_d = $rows_1['sum(flow)'];
            $res[] = ['name'=>$site,'sy'=>$sumflow_lm,'dy'=>$sumflow_m,'qt'=>$sumflow_w,'dt'=>$sumflow_d];
        }
        $result['datas'] = $res;
        return $this->success($result);
    }


    public function lm($post)
    {

        if(empty($post['site'])){
            return $this->error('请填写搜索条件');
        }
        $site = trim($post['site']);
        $db = $this->conn;
        $lable = '';
        if($site)
        {
            $sql = "select * from lc_lmsite_flow where site = '$site'";
            $datas_s = $db->createCommand($sql)->queryAll();
            $sql_bw = "select * from lc_lmsite_bandwidth where site = '$site'";
            $datas_bw = $db->createCommand($sql_bw)->queryAll();
            $lable = $site;
            $data = '';
            $data2 = '';
            if($datas_s)
            { $lable .= "(". $datas_s[0]['intime'].")";
                foreach ($datas_s as $value)
                {
                    $data .=$value['flow']."  |  ";
                }
            }
            if($datas_bw)
            {
                foreach ($datas_bw as $value)
                {
                    $data2 .=$value['bandwidth']."  |  ";
                }
            }
        }
        $resdata = [];
        $resdata2 = [];
        $resdata[0]['lable'] = $lable;
        $resdata[0]['data'] = $data;
        $resdata2[0]['lable'] = $lable;
        $resdata2[0]['data'] = $data2;

        $result['datas'] = $resdata;
        $result['datas2'] = $resdata2;
        return $this->success($result);
    }

    public function ddos($data,$userInfo)
    {

        $groups = [];
        $nodeIp = [];
        $node = new Node();
        $nodes = $node->idToIp();
        $domain  =  Domain::find()->select('id,node_group,sys_node_group')->where(['user_id'=>$userInfo['uid'],'status'=>2])->asArray()->all();
        if($domain) {
            $dids = [];
            foreach ($domain as $dvalue) {
                $dids[] = $dvalue['id'];
                if ($dvalue['node_group'] == $dvalue['sys_node_group'] || $dvalue['sys_node_group'] == 0) {
                    $groups [$dvalue['id']] = $dvalue['node_group'];
                } else if ($dvalue['node_group'] != $dvalue['sys_node_group'] || $dvalue['sys_node_group'] != 0) {
                    $groups [$dvalue['id']] = $dvalue['sys_node_group'];
                }
            }
            unset($dvalue);
            unset($domain);
            $remap = Remap::find()->select('did,aimurl')->where(['in','did',$dids])->asArray()->all();
            if($remap) {
                foreach ($groups as $gkey=>$gvalue) {
                    if(isset($nodes[$gvalue]))
                    {
                        foreach ($remap as $rvalue)
                        {
                            $nodeIp[$nodes[$gvalue]] ['aimurl'][] =$rvalue['aimurl'];
                        }
                    }
                }
                unset($gkey);
                unset($gvalue);
                unset($groups);
            }
            unset($dids);
        }

        $defence  =  Defence::find()->select('id,node_group,sys_node_group')->where(['user_id'=>$userInfo['uid'],'status'=>2])->asArray()->all();
        if($defence) {
            $dids = [];
            foreach ($defence as $dvalue) {
                $dids[] = $dvalue['id'];
                if ($dvalue['node_group'] == $dvalue['sys_node_group'] || $dvalue['sys_node_group'] == 0) {
                    $groups [$dvalue['id']] = $dvalue['node_group'];
                } else if ($dvalue['node_group'] != $dvalue['sys_node_group'] || $dvalue['sys_node_group'] != 0) {
                    $groups [$dvalue['id']] = $dvalue['sys_node_group'];
                }
            }
            unset($dvalue);
            unset($defence);
            $remap = DefenceRemap::find()->select('did,aimurl')->where(['in','did',$dids])->asArray()->all();
            if($remap) {
                foreach ($groups as $gkey=>$gvalue) {
                    if(isset($nodes[$gvalue]))
                    {
                        foreach ($remap as $rvalue)
                        {
                            $nodeIp[$nodes[$gvalue]] ['aimurl'][] =$rvalue['aimurl'];
                        }
                    }
                }
                unset($gkey);
                unset($gvalue);
                unset($groups);
            }
            unset($dids);
        }
        if($nodeIp) {
            foreach ($nodeIp as $key => $val) {
                $nodeIp[$key]['aimurl'] = array_unique($nodeIp[$key]['aimurl']);
            }
            unset($key);
            unset($val);
        }
        $where = "";
        if($nodeIp)
        {
             $count = count($nodeIp);
             $i = 1;
            foreach ($nodeIp as $nkey=>$nval)
            {
                $temp = "";
                foreach ($nval['aimurl'] as $aval)
                {
                    $temp .="'".$aval."',";
                }
                if($temp)
                    $temp = rtrim($temp,",");
                if($count == $i)
                    $where .= " (node_ip = '".$nkey."' AND  ip in (".$temp."))  ";
                else
                    $where .= " (node_ip = '".$nkey."' AND  ip in (".$temp.")) OR ";
                $i++;
            }
        }
        $datas['datas'] =[];
        if($where) {
            $wheres = "select link,ip,node_ip from lc_ddos where " . $where . " order by link DESC";
            //$list = Ddos::find()->asArray()->orderBy('link desc')->all();
            $list = \Yii::$app->db->createCommand($wheres)->queryall();
            $datas['datas'] = $list;
        }
        return $this->success($datas);
    }



    public function ddosrecord($data,$userInfo)
    {
        $pagenum = $data['limit'];
        $page = $data['page'];
        $offset = 0;
        if(!empty($page) && is_numeric($page) && $page > 1){
            $offset = ($page-1) * $pagenum;
        }else{
            $page = 1;
        }

        $groups = [];
        $nodeIp = [];
        $node = new Node();
        $nodes = $node->idToIp();
        $domain  =  Domain::find()->select('id,node_group,sys_node_group')->where(['user_id'=>$userInfo['uid'],'status'=>2])->asArray()->all();
        if($domain) {
            $dids = [];
            foreach ($domain as $dvalue) {
                $dids[] = $dvalue['id'];
                if ($dvalue['node_group'] == $dvalue['sys_node_group'] || $dvalue['sys_node_group'] == 0) {
                    $groups [$dvalue['id']] = $dvalue['node_group'];
                } else if ($dvalue['node_group'] != $dvalue['sys_node_group'] || $dvalue['sys_node_group'] != 0) {
                    $groups [$dvalue['id']] = $dvalue['sys_node_group'];
                }
            }
            unset($dvalue);
            unset($domain);
            $remap = Remap::find()->select('did,aimurl')->where(['in','did',$dids])->asArray()->all();
            if($remap) {
                foreach ($groups as $gkey=>$gvalue) {
                    if(isset($nodes[$gvalue]))
                    {
                        foreach ($remap as $rvalue)
                        {
                            $nodeIp[$nodes[$gvalue]] ['aimurl'][] =$rvalue['aimurl'];
                        }
                    }
                }
                unset($gkey);
                unset($gvalue);
                unset($groups);
            }
            unset($dids);
        }

        $defence  =  Defence::find()->select('id,node_group,sys_node_group')->where(['user_id'=>$userInfo['uid'],'status'=>2])->asArray()->all();
        if($defence) {
            $dids = [];
            foreach ($defence as $dvalue) {
                $dids[] = $dvalue['id'];
                if ($dvalue['node_group'] == $dvalue['sys_node_group'] || $dvalue['sys_node_group'] == 0) {
                    $groups [$dvalue['id']] = $dvalue['node_group'];
                } else if ($dvalue['node_group'] != $dvalue['sys_node_group'] || $dvalue['sys_node_group'] != 0) {
                    $groups [$dvalue['id']] = $dvalue['sys_node_group'];
                }
            }
            unset($dvalue);
            unset($defence);
            $remap = DefenceRemap::find()->select('did,aimurl')->where(['in','did',$dids])->asArray()->all();
            if($remap) {
                foreach ($groups as $gkey=>$gvalue) {
                    if(isset($nodes[$gvalue]))
                    {
                        foreach ($remap as $rvalue)
                        {
                            $nodeIp[$nodes[$gvalue]] ['aimurl'][] =$rvalue['aimurl'];
                        }
                    }
                }
                unset($gkey);
                unset($gvalue);
                unset($groups);
            }
            unset($dids);
        }
        if($nodeIp) {
            foreach ($nodeIp as $key => $val) {
                $nodeIp[$key]['aimurl'] = array_unique($nodeIp[$key]['aimurl']);
            }
            unset($key);
            unset($val);
        }
        $where = "";
        if($nodeIp)
        {
            $count = count($nodeIp);
            $i = 1;
            foreach ($nodeIp as $nkey=>$nval)
            {
                $temp = "";
                foreach ($nval['aimurl'] as $aval)
                {
                    $temp .="'".$aval."',";
                }
                if($temp)
                    $temp = rtrim($temp,",");
                if($count == $i)
                    $where .= " (node_ip = '".$nkey."' AND  ip in (".$temp."))  ";
                else
                    $where .= " (node_ip = '".$nkey."' AND  ip in (".$temp.")) OR ";
                $i++;
            }
        }
        $datas['datas'] =[];
        $count = 0;
        if($where) {
            $sql_count = "select count(*) as count from lc_ddos_record where " . $where ;
            $res_count = \Yii::$app->db->createCommand($sql_count)->queryOne();
            $count = $res_count['count'];

            $wheres = "select link,ip,node_ip,time from lc_ddos_record where " . $where . " order by id DESC limit ".$offset.",".$pagenum;
            //$list = Ddos::find()->asArray()->orderBy('link desc')->all();
            $list = \Yii::$app->db->createCommand($wheres)->queryall();
            $datas['datas'] = $list;
        }
        $datas['page'] = (int)$page; //当前页码
        $datas['count']= intval($count); //总条数
        return $this->success($datas);
    }



    public function traffic($post)
    {

        $time = $post['time'];
        if($time){
            $dateFrom =strtotime($time[0]);
            $dateTo = strtotime($time[1])+86400;
        }else{
            return $this->error("请选择时间");
        }

        $page = $post['page'];
        $pagenum = $post['limit'];
        if(empty($pagenum)){
            $pagenum = $this->pagenum;
        }
        $offset = 0;
        if(!empty($page) && is_numeric($page) && $page > 1){
            $offset = ($page-1) * $pagenum;
        }else{
            $page = 1;
        }

        $code =  isset($post['code']) ? trim($post['code']) : "" ;
        $ip = isset($post['ip']) ? trim($post['ip']) : "" ;
        $dm =isset($post['dm']) ? trim($post['dm']) : "" ;

        if( empty($post['dm'])){
            return $this->error('域名必须选择');
        }

        $sql = "select * from lc_sar_traffic where ";
        $sql_c = "select count(*) from lc_sar_traffic where";
        $where_ip = " 1=1 ";
        if($ip){
            $res = Utils::isIp($ip);
            if(!$res){
                return $this->error('ip格式错误');
            }
            $keyword_ip = sprintf('%u',ip2long($ip));
            // echo sprintf('%u',ip2long($ip));exit;
            $where_ip = " ip = $keyword_ip";
        }
        $where_dm = " 1=1 ";
        if($dm){
            $where_dm = " MATCH (url)  AGAINST('{$dm}')";
        }
        $where_code = " 1=1 ";
        if($code){
            $where_code = "resultCode = '{$code}'";
        }
        $where_time = " intime >= ".$dateFrom ." and intime < ". $dateTo ;

        $sql = $sql . $where_ip . ' and '.$where_dm . ' and '.$where_code.' and '.$where_time .' order by id  desc  ';
        $sql_count = $sql_c . $where_ip . ' and '.$where_dm . ' and '.$where_code.' and '.$where_time. ' order by id  desc  ';

        $db = $this->conn;
        $count = $db->createCommand($sql_count)->queryScalar();
        // $count = 100;  //总条数
        //总页数
        $allpage = 1;
        if($count > $pagenum){
            $allpage = ceil($count/$pagenum);
        }
        $datas = [];
        if($page <= $allpage){
            $datas = $db->createCommand($sql." limit ".$offset.",".$pagenum)->queryAll();  //总条数

        }
        if($datas)
        {
//            $nodeArr = [];
//            // $res_node = Node::find()->select('id,ip')->asArray()->all();
//            $sql = "select id,ip from {{%node}} ";
//            $res_node = $db->createCommand($sql)->queryAll();
//            if($res_node){
//                foreach ($res_node as $v){
//                    $nodeArr[$v['id']] = $v['ip'];
//                }
//            }
            $node = new Node();
            $nodeArr = $node->idToIp();
            foreach ($datas as $key=>$value)
            {
                $datas[$key]['ip'] = long2ip($value['ip']);
                if(isset($nodeArr[$value['nodeid']]))
                {
                    $datas[$key]['nodeid'] = $nodeArr[$value['nodeid']];
                }
                $datas[$key]['resultCode'] = $value['resultStatus']."/".$value['resultCode'];
            }
        }
        //数据列表
        $result['page'] = (int)$page; //当前页码
        $result['count']= intval($count); //总条数
        $result['allpage'] = (int)$allpage ;
        $result['datas'] = $datas;
        return $this->success($result);
    }


    public function _get_dname_cname($did){
        //$data = Domain::find()->select('cname')->where(['dname'=>$dname])->one();
        $didArr = explode("_",$did);

        if($didArr[1] == 1)
        $sql = "select cname from {{%domain}} WHERE id = '{$didArr[0]}'";
        else
          $sql = "select cname from {{%defence}} WHERE id = '{$didArr[0]}'";
        $data = $this->conn->createCommand($sql)->queryOne();
        $cname = "";
        if($data)
            $cname = $data['cname'];
        return $cname;
    }

    protected function param($post){
        //时间，一个数组
        $time = $post['time'];
        if($time){
            $this->dateFrom = floor(strtotime($time[0])*300)/300;
            $this->dateTo = floor(strtotime($time[1])*300)/300;
        }
        //时间间隔，粒度 5分钟，小时，天
        if($post['unit']){
            $this->unit = $post['unit'];
        }

        //先组合x轴数据， 时间点
        $this->xData = [];
        $this->yData = [];
//        $this->type = $post['type']; //普通还是高防 1普通，2高防， 默认是普通流量
//        if(!$this->type ){
//            $this->type  = 1;
//        }
        $did =  $post['did'];
        if($did) {
            $didArr = explode("_",$did);
            $this->did = $didArr[0]; //域名ID， 如果是高防，则是defenceid
            $this->type  =$didArr[1];
        }
//        $user_id = $post['user_id'];
//        if(!$this->did && $user_id){
//            //通过user_id 找did
//            if($this->type ==1){
//                $this->did = $this->getDidByUid($user_id);
//            }else{
//                //高防
//                $this->did = $this->getDefenceIdByUid($user_id);
//            }
//        }
        return true;
    }

    //domain  did
    protected function getDidByUid($user_id){
        //通过user_id 转换user_name
        //$userInfo = User::findOne($user_id);
        $sql_user = "select username from {{%user}} WHERE id = ".$user_id;
        $userInfo = $this->conn->createCommand($sql_user)->queryOne();
        if(!$userInfo){
            $did = 0;
        }else{
            $username = $userInfo['username'];
            //$domainInfo = Domain::find()->where(['username'=>$username])->all();
            $sql = "select  id from {{%domain}} where username = '{$username}' ";
            $domainInfo = $this->conn->createCommand($sql)->queryAll();
            if(empty($domainInfo)){
                $did = 0;
            }else{
                $did = [];
                foreach ($domainInfo as $v){
                    $did[] = $v['id'];
                }
            }
        }
        return $did;
    }


    public function links($data,$userInfo)
    {

        $user = $userInfo['username'];
        $dname = $data['url'];
        $date = date("Y-m-d",strtotime("-1 day"));
        //存储文件路径及文件名
        $file_name = $dname.$date.'traffic.txt';
        $file_path =  \Yii::getAlias('@dns_file')."/log/".$user.'/';

        //下载
        if(!file_exists($file_path.$file_name)){
            return $this->error('无日志文件');
        }

        $fp=fopen($file_path.$file_name,"r");

        $file_size=filesize($file_path.$file_name);
        //echo $file_size;die;
        //返回的文件(流形式)
        header("Content-type: application/octet-stream");
        header("Accept-Ranges: bytes");
        header("Accept-Length: $file_size");
        header("Content-Disposition: attachment; filename=".$file_name);

        readfile ($file_path.$file_name);

        ob_clean();
        flush();

        $buffer=1024;

        $count=0;
        $str = "";
        while(!feof($fp)&&($file_size-$count>0)){
            $data=fread($fp,$buffer);
            $count+=$buffer;//计数
            //echo $data;//传数据给浏览器端
            $str .=$data;
        }

        fclose($fp);
        return $this->success(['data'=>$str,'filename'=>$file_name]);
        exit;


    }


    //defence did
    protected function getDefenceIdByUid($user_id){
       // $defenceInfo = Defence::find()->where(['user_id'=>$user_id])->all();
        $sql = "select  id from {{%defence}} where user_id = ".$user_id;
        $defenceInfo = $this->conn->createCommand($sql)->queryAll();
        if(empty($defenceInfo)){
            $did = 0;
        }else{
            $did = [];
            foreach ($defenceInfo as $v){
                $did[] = $v['id'];
            }
        }
        return $did;
    }


    protected function roundData($data){
        return round($data* $this->multiple,2);
    }

}
