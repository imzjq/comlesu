<?php
/**
 * Created by PhpStorm.
 * User: admin
 * Date: 2018/11/23
 * Time: 20:06
 */

namespace backend\models;

use common\lib\Utils;
use common\models\ApiSourceErr;
use common\models\CodeNum;
use common\models\Ddos;
use common\models\DomainCodeNum;
use common\models\Flow as CommonFlow;
use common\models\FlowGf;
use common\models\IpdatabaseSimplify;
use common\models\OriginMs;
use Yii;
use yii\data\Pagination;

class Flow extends CommonFlow
{
    use ApiTrait;
    protected $dateFrom; //开始时间
    protected $dateTo;
    public $unit = 3600; //单位
    public $conn;

    public $i = 0;
    public $did = 0;  //用户id
    public $where = "";
    public $xData; //x轴数据
    public $yData; //y轴数据
    protected $type; //普通或者高防

    public $multiple = 1.4; //计算流量带宽的倍数

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->dateFrom = strtotime("today")-60*60*24*7;
        $this->dateTo = floor(time()/300)*300;
        $this->conn = Yii::$app->db;
    }

    //流量查询
    public function flowStat($post){
        $this->param($post);
        $totalFlow = 0;
        $date = [date('Y-m-d',$this->dateFrom),date('Y-m-d',$this->dateTo)];
        if(!$this->where){
            for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){
                array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));
                array_push($this->yData,0);
            }

            return $datas = [
                'xData'=>$this->xData,
                'yData'=>$this->yData,
                'totalFlow'=>'总流量:'.$totalFlow.'(MB)', //总流量
                'title'=>'流量',
                'date'=>$date,
            ];
        }
//        if(!is_array($this->did)){
//            $did = explode(',',$this->did);
//        }else{
//            $did = $this->did;
//        }
        $flowModel = new Flow();
        $where = "  intime  >= {$this->dateFrom} AND intime < {$this->dateTo} AND " .$this->where;
        //->where($this->where)
        $info = $flowModel::find()->where($where)->select('flow,intime')->asArray()->all();

        $time_flow = [];
        if($info){
            foreach ($info as $v) {
                if(!isset($time_flow[$v['intime']]))
                $time_flow[$v['intime']] = $v['flow'];
                else
                    $time_flow[$v['intime']]  +=$v['flow'];
            }
            unset($info);
        }

        for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){
            array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));
            if(isset($time_flow[$this->dateFrom])){
                $flow = $this->roundData($time_flow[$this->dateFrom]);
            }else{
                $flow = 0;
            }

            $totalFlow +=$flow;
            array_push($this->yData,$flow);
        }
        return $datas = [
            'xData'=>$this->xData,
            'yData'=>$this->yData,
            //'totalFlow'=>'总流量:'.$this->roundData($totalFlow).'(MB)', //总流量
            'totalFlow'=>'总流量:'.$totalFlow.'(MB)', //总流量
            'title'=>'流量查询',
            'date'=>$date,
        ];

    }

    //带宽查询
    public function bandwidth($post){
        $this->param($post);
        $pV = 0; //第四峰值
        $date = [date('Y-m-d',$this->dateFrom),date('Y-m-d',$this->dateTo)];
        if(!$this->where){
            for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){
                array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));
                array_push($this->yData,0);
            }
            return $datas = [
                'xData'=>$this->xData,
                'yData'=>$this->yData,
                'pV'=>'当前的第四峰值:'.$pV.'Mb/s',
                'title'=>'流量',
                'date'=>$date,
            ];
        }

//        if(!is_array($this->did)){
//            $did = explode(',',$this->did);
//        }else{
//            $did = $this->did;
//        }

        $where = "  intime  >= {$this->dateFrom} AND intime < {$this->dateTo} AND " .$this->where;
        $flowModel = new Flow();
        $bwRow = $flowModel::find()->where($where)->select('flow,intime')->asArray()->all();

        $bw = [];
        $bw_c = [];
        if($bwRow){
            foreach ($bwRow as $v) {
                //$bw[$v['intime']] = $v['flows'];
                if(!isset($bw[$v['intime']]))
                    $bw[$v['intime']] = $v['flow'];
                else
                    $bw[$v['intime']]  +=$v['flow'];
            }
        }

        for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){
            array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));

            if(isset($bw[$this->dateFrom])){
                $total = $this->roundData($bw[$this->dateFrom]/300*8);
            }else{
                $total = 0;
            }
            if($total !=0 or !empty($bw_c)){
                $bw_c[]=$total;
            }
            array_push($this->yData,$total);
        }
        if (is_array($bw_c) && !empty($bw_c)) {
            rsort($bw_c);
            //$sum = count($bw_c);
            //$bw_ = floor($sum * 0.05);
            //$bw_charging = $bw_c[$bw_];
            $pV = $bw_c[3];
        }
        return $datas = [
            'xData'=>$this->xData,
            'yData'=>$this->yData,
            'pV'=>'当前的第四峰值:'.$pV.'Mb/s',
            'title'=>'带宽',
            'date'=>$date,
        ];
    }


    //点击量查询
    public function hit($post){
        $this->param($post);
        $totalHit = 0;
        $date = [date('Y-m-d',$this->dateFrom),date('Y-m-d',$this->dateTo)];
        if(!$this->where){
            for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){
                array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));
                array_push($this->yData,0);
            }
            return $datas = [
                'xData'=>$this->xData,
                'yData'=>$this->yData,
                'totalHit'=>'总请求:'.$totalHit, //
                'title'=>'请求数',
                'date'=>$date,
            ];
        }

//        if(!is_array($this->did)){
//            $did = explode(',',$this->did);
//        }else{
//            $did = $this->did;
//        }
        $where = "  intime  >= {$this->dateFrom} AND intime < {$this->dateTo} AND " .$this->where;

        $flowModel = new Flow();
        $info = $flowModel::find()->where($where)->select('hit,intime')->asArray()->all();
        $time_hit = [];
        if($info){
            foreach ($info as $v) {
               //$time_hit[$v['intime']] = $v['hit'];
                if(!isset($time_hit[$v['intime']]))
                    $time_hit[$v['intime']] = $v['hit'];
                else
                    $time_hit[$v['intime']]  +=$v['hit'];
            }
        }


        for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){
            array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));
            if(isset($time_hit[$this->dateFrom])){
               // $hit = $this->roundData($time_hit[$this->dateFrom]);
                $hit = $time_hit[$this->dateFrom];
            }else{
                $hit = 0;
            }
            $totalHit +=$hit;
            array_push($this->yData,$hit);
        }
        return $datas = [
            'xData'=>$this->xData,
            'yData'=>$this->yData,
            'totalHit'=>'总请求:'.$totalHit, //
            'title'=>'请求数',
            'date'=>$date,
        ];

    }

    public function links($post,$where=[])
    {
        $page = $post['page'];
        $pagenum = $post['limit'];
        if(empty($pagenum)){
            $pagenum = $this->pagenum;
        }
        $offset = 0;
        if(!empty($page) && is_numeric($page) && $page > 1){
            $offset = ($page-1) * $pagenum;
        }else{
            $page = 1;
        }
        $model = new Ddos();
        $list = $model::find();

        if(!empty($where)){
            $i = 0;
            foreach ($where as $k=>$v){
                if($i==0){
                    $list->where($v);
                }else{
                    $list->andWhere($v);
                }
                $i++;
            }
        }

        $count = $list->count();  //总条数
        //总页数
        $allpage = 1;
        $datas = [];
        if($page <= $allpage){
            $list->offset($offset)->limit($pagenum)->orderBy('link DESC');
            $datas = $list->all();
        }

        //数据列表
        $result['page'] = (int)$page; //当前页码
        $result['count']= intval($count); //总条数
        $result['allpage'] = (int)$allpage ;
        $result['datas'] = $datas;
        return $this->success($result);
    }

    public function log($post)
    {
        $page = $post['page'];
        $pagenum = $post['limit'];
        if(empty($pagenum)){
            $pagenum = $this->pagenum;
        }
        $offset = 0;
        if(!empty($page) && is_numeric($page) && $page > 1){
            $offset = ($page-1) * $pagenum;
        }else{
            $page = 1;
        }

        $did = $post['did'];
        $time = $post['time'];
        if(empty($did) || empty($time))
        {
            return $this->error('请选择条件');
        }
        $dids = explode("_",$did);
        $where = [];
        if($did)
        {
            $where[] = ['did'=>$dids[0]];
            $where[] = ['type'=>$dids[1]];
        }
        if($time)
        {
            $where[] = ['>=','date',$time[0]];
            $where[] = ['<=','date',$time[1]];
        }

        $model = new CodeNum();
        $list = $model::find();
        if(!empty($where)){
            $i = 0;
            foreach ($where as $k=>$v){
                if($i==0){
                    $list->where($v);
                }else{
                    $list->andWhere($v);
                }
                $i++;
            }
        }
        $count = $list->count();  //总条数
        //总页数
        $allpage = 1;
        $datas = [];
        if($page <= $allpage){
            $list->offset($offset)->limit($pagenum);
            $datas = $list->all();
        }

        //数据列表
        $result['page'] = (int)$page; //当前页码
        $result['count']= intval($count); //总条数
        $result['allpage'] = (int)$allpage ;
        $result['datas'] = $datas;
        return $this->success($result);
    }

    public function dns($post)
    {
        $page = $post['page'];
        $pagenum = $post['limit'];
        if(empty($pagenum)){
            $pagenum = $this->pagenum;
        }
        $offset = 0;
        if(!empty($page) && is_numeric($page) && $page > 1){
            $offset = ($page-1) * $pagenum;
        }else{
            $page = 1;
        }

        $dname = isset($post['dname']) ? $post['dname'] : '' ;
        $time = $post['time'];
        if(empty($dname) || empty($time))
        {
            return $this->error('请选择条件');
        }
        $sql = "select ip from  {{%white_list}} WHERE ";
        $sql2 = "select count(*) from  {{%white_list}} WHERE ";
        if($dname)
        {
            $cname = self::_get_dname_cname($dname);
           $sql .="dns = '".$cname."'";
           // $sql .="dns = '24cdn.dnsunions.com'";
            $sql2 .="dns = '".$cname."'";
            //$sql2 .="dns = '24cdn.dnsunions.com' ";
        }
        if($time)
        {
            $sql .= " AND intime BETWEEN '".date('Y-m-d H:i:s',strtotime($time[0]))."' AND '".date('Y-m-d H:i:s',strtotime($time[1]))."'";
            $sql2 .= " AND intime BETWEEN '".date('Y-m-d H:i:s',strtotime($time[0]))."' AND '".date('Y-m-d H:i:s',strtotime($time[1]))."'";
        }
        $db = $this->conn;

        $count = $db->createCommand($sql2)->queryScalar();  //总条数
        //总页数
        $allpage = 1;
        if($count > $pagenum){
            $allpage = ceil($count/$pagenum);
        }
        $res = array();
        if($page <= $allpage){
            $sql .= " LIMIT ".$offset.",".$pagenum;
            $datas = $db->createCommand($sql)->queryAll();
            if($datas)
            {
                $ipdate = new IpdatabaseSimplify();
                foreach ($datas as $val)
                {
                    $tmp = array();
                    $ip = $val['ip'];
                    $ip_info =  $ipdate->checkGroup($ip);
                    if($ip_info===false){
                        continue;
                    }
                    $tmp['ip'] = $ip;
                    $tmp['country'] = $ip_info['country'];
                    $tmp['province'] = $ip_info['province'];
                    $tmp['city'] = $ip_info['city'];
                    $tmp['service'] = $ip_info['service'];
                    $res [] = $tmp;
                }
                unset($datas);

            }
        }

        //数据列表
        $result['page'] = (int)$page; //当前页码
        $result['count']= intval($count); //总条数
        $result['allpage'] = (int)$allpage ;
        $result['datas'] = $res;
        return $this->success($result);
    }


    public function api($post)
    {
        $page = $post['page'];
        $pagenum = $post['limit'];
        if(empty($pagenum)){
            $pagenum = $this->pagenum;
        }
        $offset = 0;
        if(!empty($page) && is_numeric($page) && $page > 1){
            $offset = ($page-1) * $pagenum;
        }else{
            $page = 1;
        }

        $node_ip = $post['node_ip'];
        $source_ip = $post['source_ip'];
        $time = $post['time'];
        $username = $post['username'];
        $where = [];
        if($node_ip)
        {
            $where[] = ['node_ip'=>$node_ip];
        }
        if($source_ip)
        {
            $where[] = ['source_ip'=>$source_ip];
        }
        if($username)
        {
            $where[] = ['username'=>$username];
        }
        if($time)
        {
            $where[] = ['>=','record_time',date('Y-m-d H:i:s',strtotime($time[0]))];
            $where[] = ['<=','record_time',date('Y-m-d H:i:s',strtotime($time[1]))];
        }

        $model = new ApiSourceErr();
        $list = $model::find();
        if(!empty($where)){
            $i = 0;
            foreach ($where as $k=>$v){
                if($i==0){
                    $list->where($v);
                }else{
                    $list->andWhere($v);
                }
                $i++;
            }
        }
        $count = $list->count();  //总条数

        //总页数
        $allpage = 1;
        if($count > $pagenum){
            $allpage = ceil($count/$pagenum);
        }
        $datas = [];
        if($page <= $allpage){
            $list->offset($offset)->limit($pagenum)->orderBy('id DESC');
            $datas = $list->all();
        }

        //数据列表
        $result['page'] = (int)$page; //当前页码
        $result['count']= intval($count); //总条数
        $result['allpage'] = (int)$allpage ;
        $result['datas'] = $datas;
        return $this->success($result);
    }



    public function time($post)
    {

        $db = $this->conn;

        $res = [];
        $size = array();
        $beginTime_lm = strtotime(date('Y-m-01', strtotime('-1 month')));
        $endTime_lm = strtotime(date('Y-m-t', strtotime('-1 month')));

        $beginTime_m = strtotime(date("Y-m-01"));
        $endTime_m = floor(time() / 300) * 300;

        $beginTime_w = strtotime("today") - 60 * 60 * 24 * 7;
        $endTime_w = floor(time() / 300) * 300;

        $beginTime_d = strtotime("today");
        $endTime_d = floor(time() / 300) * 300;

        if(!empty($post['username']))
        {
            $user_id = $post['user_id'];
            $userModel =new User();
            $user = $userModel->getOne($user_id);

            if($user['code'] != 200)
                return $this->error("找不到用户");
            $sql = "select id from lc_domain where user_id = '$user_id'";
            $rows = $db->createCommand($sql)->queryAll();
            foreach ($rows as $v){
                $size[] = $v['id'];
            }
            $sites = implode("','",$size);
            $sql_1 = "SELECT sum(flow)  FROM `lc_flow` WHERE intime<'$endTime_lm' and intime>='$beginTime_lm' and did in ('$sites')";
            $rows_1 = $db->createCommand($sql_1)->queryOne();
            $sumflow_lm = $rows_1['sum(flow)'];

            //当月总流量


            $sites = implode("','",$size);
            $sql_1 = "SELECT sum(flow)  FROM `lc_flow` WHERE intime<'$endTime_m' and intime>='$beginTime_m' and did in ('$sites')";
            $rows_1 = $db->createCommand($sql_1)->queryOne();
            $sumflow_m = $rows_1['sum(flow)'];

            //七天总流量


            $sites = implode("','",$size);
            $sql_1 = "SELECT sum(flow)  FROM `lc_flow` WHERE intime<'$endTime_w' and intime>='$beginTime_w' and did in ('$sites')";
            $rows_1 = $db->createCommand($sql_1)->queryOne();
            $sumflow_w = $rows_1['sum(flow)'];

            //当天总流量
            $sites = implode("','",$size);
            $sql_1 = "SELECT sum(flow)  FROM `lc_flow` WHERE intime<'$endTime_d' and intime>='$beginTime_d' and did in ('$sites')";
            $rows_1 = $db->createCommand($sql_1)->queryOne();
            $sumflow_d = $rows_1['sum(flow)'];

           $res[] = ['name'=>$user['data']['username'],'sy'=>$sumflow_lm,'dy'=>$sumflow_m,'qt'=>$sumflow_w,'dt'=>$sumflow_d];
        }else if(!empty($post['keywords'])){

            $site = $post['keywords'];
            $sql_1 = "select sum(flow) from lc_flow where intime<'$endTime_lm' and intime>='$beginTime_lm' and site = '$site'";
            $rows_1 = $db->createCommand($sql_1)->queryOne();
            //print_r($rows);
            $sumflow_lm = $rows_1['sum(flow)'];

            $beginTime_m = strtotime(date("Y-m-01"));
            $endTime_m = floor(time() / 300) * 300;
            $sql_1 = "select sum(flow) from lc_flow where intime<'$endTime_m' and intime>='$beginTime_m' and site = '$site'";
            $rows_1 = $db->createCommand($sql_1)->queryOne();
            //print_r($rows);
            $sumflow_m = $rows_1['sum(flow)'];


            $beginTime_w = strtotime("today") - 60 * 60 * 24 * 7;
            $endTime_w = floor(time() / 300) * 300;
            $sql_1 = "select sum(flow) from lc_flow where intime<'$endTime_w' and intime>='$beginTime_w' and site = '$site'";
            $rows_1 = $db->createCommand($sql_1)->queryOne();
            //print_r($rows);
            $sumflow_w = $rows_1['sum(flow)'];

            $beginTime_d = strtotime("today");
            $endTime_d = floor(time() / 300) * 300;
            $sql_1 = "select sum(flow) from lc_flow where intime<'$endTime_d' and intime>='$beginTime_d' and site = '$site'";
            $rows_1 = $db->createCommand($sql_1)->queryOne();
            //print_r($rows);
            $sumflow_d = $rows_1['sum(flow)'];
            $res[] = ['name'=>$site,'sy'=>$sumflow_lm,'dy'=>$sumflow_m,'qt'=>$sumflow_w,'dt'=>$sumflow_d];
        }
        $result['datas'] = $res;
        return $this->success($result);
    }


    public function traffic($post)
    {
        $page = $post['page'];
        $pagenum = $post['limit'];
        if(empty($pagenum)){
            $pagenum = $this->pagenum;
        }
        $offset = 0;
        if(!empty($page) && is_numeric($page) && $page > 1){
            $offset = ($page-1) * $pagenum;
        }else{
            $page = 1;
        }

        if(empty($post['ip']) && empty($post['dm'])){
           return $this->error('IP或域名必须填写');
        }
        $code =  isset($post['code']) ? trim($post['code']) : "" ;
        $ip = isset($post['ip']) ? trim($post['ip']) : "" ;
        $dm =isset($post['dm']) ? trim($post['dm']) : "" ;
        $sql = "select * from lc_sar_traffic where ";
        $sql_c = "select count(*) from lc_sar_traffic where";
        $where_ip = " 1=1 ";
        if($ip){
            $res = Utils::isIp($ip);
            if(!$res){
               return $this->error('ip格式错误');
            }
            $keyword_ip = sprintf('%u',ip2long($ip));
           // echo sprintf('%u',ip2long($ip));exit;
            $where_ip = " ip = $keyword_ip";
        }
        $where_dm = " 1=1 ";
        if($dm){
            $where_dm = " MATCH (url)  AGAINST('{$dm}')";
        }
        $where_code = " 1=1 ";
        if($code){
            $where_code = "resultCode = '{$code}'";
        }
        $sql = $sql . $where_ip . ' and '.$where_dm . ' and '.$where_code.' order by id  desc  ';
        $sql_count = $sql_c . $where_ip . ' and '.$where_dm . ' and '.$where_code.' order by id  desc  ';
        $db = $this->conn;
        $count = $db->createCommand($sql_count)->queryScalar();
       // $count = 100;  //总条数
        //总页数
        $allpage = 1;
        if($count > $pagenum){
            $allpage = ceil($count/$pagenum);
        }
        $datas = [];
        if($page <= $allpage){
            $datas = $db->createCommand($sql." limit ".$offset.",".$pagenum)->queryAll();  //总条数

        }
        if($datas)
        {
            $nodeArr = [];
           // $res_node = Node::find()->select('id,ip')->asArray()->all();
            $sql = "select id,ip from {{%node}} ";
            $res_node = $db->createCommand($sql)->queryAll();
            if($res_node){
                foreach ($res_node as $v){
                    $nodeArr[$v['id']] = $v['ip'];
                }
            }
            foreach ($datas as $key=>$value)
            {
                $datas[$key]['ip'] = long2ip($value['ip']);
                if(isset($nodeArr[$value['nodeid']]))
                {
                    $datas[$key]['nodeid'] = $nodeArr[$value['nodeid']];
                }
                $datas[$key]['resultCode'] = $value['resultStatus']."/".$value['resultCode'];
            }
        }
        //数据列表
        $result['page'] = (int)$page; //当前页码
        $result['count']= intval($count); //总条数
        $result['allpage'] = (int)$allpage ;
        $result['datas'] = $datas;
        return $this->success($result);
    }


    public function lm($post)
    {


        if(empty($post['site']) && empty($post['username'])){
            return $this->error('请填写搜索条件');
        }
        $site = trim($post['site']);
        $username = trim($post['username']);
        $db = $this->conn;
        $lable = '';
        if($site)
        {
            $sql = "select * from lc_lmsite_flow where site = '$site'";
            $datas_s = $db->createCommand($sql)->queryAll();
            $sql_bw = "select * from lc_lmsite_bandwidth where site = '$site'";
            $datas_bw = $db->createCommand($sql_bw)->queryAll();
            $lable = $site;
            $data = '';
            $data2 = '';
            if($datas_s)
            { $lable .= "(". $datas_s[0]['intime'].")";
                foreach ($datas_s as $value)
                {
                    $data .=$value['flow']."  |  ";
                }
            }
            if($datas_bw)
            {
                foreach ($datas_bw as $value)
                {
                    $data2 .=$value['bandwidth']."  |  ";
                }
            }

        }else{
            $sql = "select * from lc_lm_flow where username = '$username'";
            $datas_s = $db->createCommand($sql)->queryAll();
            $sql_bw = "select * from lc_lm_bandwidth where username = '$username'";
            $datas_bw = $db->createCommand($sql_bw)->queryAll();
            $lable = $username;
            $data = '';
            $data2 = '';
            if($datas_s)
            {
                $lable .="(". $datas_s[0]['intime'].")";
                foreach ($datas_s as $value)
                {
                    $data .=$value['flow']."  |  ";
                }
            }
            if($datas_bw)
            {
                foreach ($datas_bw as $value)
                {
                    $data2 .=$value['bandwidth']."  |  ";
                }
            }
        }
        $resdata = [];
        $resdata2 = [];
        $resdata[0]['lable'] = $lable;
        $resdata[0]['data'] = $data;
        $resdata2[0]['lable'] = $lable;
        $resdata2[0]['data'] = $data2;

        $result['datas'] = $resdata;
        $result['datas2'] = $resdata2;
        return $this->success($result);
    }



    public function statistics($post)
    {
        $time = $post['time'];
        if($time){
            $this->dateFrom = floor(strtotime($time[0])*300)/300;
            $this->dateTo = floor(strtotime($time[1])*300)/300 + 86400 ;
        }

        $this->unit = 300;
        //先组合x轴数据， 时间点
        $this->xData = [];
        $this->yData = [];

        $did =  $post['did'];
        if($did) {
            $didArr = explode("_",$did);
            $this->did = $didArr[0]; //域名ID， 如果是高防，则是defenceid
            $this->type  =$didArr[1];
        }
        if(!$this->did){
            for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){
                array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));
                array_push($this->yData,0);
            }
            return $datas = [
                'xData'=>$this->xData,
                'yData'=>$this->yData,
                'title'=>'流量',
            ];
        }

        $did = $this->did;
        $flowModel = new CodeNum();
        $info  = [];
        $info_code = [];
        if($did)
            $info = $flowModel::find()->where(['between', 'intime', $this->dateFrom, $this->dateTo])->andWhere(['did' => $did])->andWhere(['type' => $this->type])->select('num,intime,code')->asArray()->all();

        $time_flow = [];
        if($info){
            foreach ($info as $v) {
                $time_flow[$v['intime']] [$v['code']] = (int)$v['num'];
                if(!in_array($v['code'],$info_code))
                    $info_code[] = $v['code'];
            }
            unset($info);
        }

        $i = 0;
        $temp_dataForm = $this->dateFrom;
        foreach ($info_code as $info_val){
            $this->yData[$info_val] = [];
            for ($this->dateFrom; $this->dateFrom < $this->dateTo; $this->dateFrom += $this->unit){

                if($i == 0)
                    array_push($this->xData,date('Y-m-d H:i',$this->dateFrom));

                if(isset($time_flow[$this->dateFrom]))
                {
                    if(isset($time_flow[$this->dateFrom][$info_val]))
                    {
                        array_push($this->yData[$info_val],$time_flow[$this->dateFrom][$info_val]);
                    }else{
                        array_push($this->yData[$info_val],0);
                    }
                }else{
                    array_push($this->yData[$info_val],0);
                    //$this->yData[$info_val][$this->dateFrom];
                }
            }
            $this->dateFrom = $temp_dataForm;

            $i++;
        }


        return $datas = [
            'xData'=>$this->xData,
            'yData'=>$this->yData,

        ];

    }




    public function _get_dname_cname($dname){
        //$data = Domain::find()->select('cname')->where(['dname'=>$dname])->one();
        $sql = "select cname from {{%domain}} WHERE dname = '{$dname}'";
        $data = $this->conn->createCommand($sql)->queryOne();
        $cname = "";
        if($data)
            $cname = $data['cname'];
        return $cname;
    }

    protected function param($post){
        //时间，一个数组
        $time = $post['time'];
        if($time){
            $this->dateFrom = floor(strtotime($time[0])*300)/300;
            $this->dateTo = floor(strtotime($time[1])*300)/300;
        }
        //时间间隔，粒度 5分钟，小时，天
//        if($post['unit']){
//            $this->unit = $post['unit'];
//        }
        $this->unit = 300;
        //先组合x轴数据， 时间点
        $this->xData = [];
        $this->yData = [];
        $this->type  = 1;
        $this->did = $post['did']; //域名ID， 如果是高防，则是defenceid
        $user_id = $post['user_id'];
        if(!$this->did && $user_id){
                $this->where = $this->getDidByUid($user_id);
        }else if($this->did){
            $arr = explode("_",$this->did);
            $this->where  = " did = ".$arr[0]." and  type = ".$arr[1];
        }
        return true;
    }


    public function orims($post)
    {
        $page = $post['page'];
        $pagenum = $post['limit'];
        if(empty($pagenum)){
            $pagenum = $this->pagenum;
        }
        $offset = 0;
        if(!empty($page) && is_numeric($page) && $page > 1){
            $offset = ($page-1) * $pagenum;
        }else{
            $page = 1;
        }

        $ip = $post['ip'];
        $ori_ip = $post['ori_ip'];
        $time = $post['time'];

        $where = [];
        if($ip)
        {
            $where[] = ['ip'=>$ip];
        }
        if($ori_ip)
        {
            $where[] = ['like','ori_ip',$ori_ip];
        }
        if($time)
        {
            $where[] = ['>=','create_time',$time[0]];
            $where[] = ['<=','create_time',date('Y-m-d',strtotime("$time[1] + 1 days"))];
        }

        $model = new OriginMs();
        $list = $model::find();
        if(!empty($where)){
            $i = 0;
            foreach ($where as $k=>$v){
                if($i==0){
                    $list->where($v);
                }else{
                    $list->andWhere($v);
                }
                $i++;
            }
        }
        $count = $list->count();  //总条数

        //总页数
        $allpage = 1;
        if($count > $pagenum){
            $allpage = ceil($count/$pagenum);
        }
        $datas = [];
        if($page <= $allpage){
            $list->offset($offset)->limit($pagenum)->orderBy('id DESC');
            $datas = $list->all();
        }

        //数据列表
        $result['page'] = (int)$page; //当前页码
        $result['count']= intval($count); //总条数
        $result['allpage'] = (int)$allpage ;
        $result['datas'] = $datas;
        return $this->success($result);
    }



    //domain  did
    protected function getDidByUid($user_id){
        //通过user_id 转换user_name
        //$userInfo = User::findOne($user_id);
        $where = "";
        $sql = "select  id,1   from {{%domain}} where user_id = {$user_id} UNION ALL select  id,2 from {{%defence}} where user_id = {$user_id} ";
        $data = $this->conn->createCommand($sql)->queryAll();
        if($data)
        {
            $datas = [];
            foreach ($data as $key=>$val)
            {
                $datas[$val['1']][]=$val['id'];
            }
            if($datas)
            {
               $count = count($datas);
                foreach ($datas as $dkey=>$dval)
                {
                    $dids =implode(",",$dval);
                    if($count >1) {
                        $where .= " (type = " . $dkey . "  and  did in (" . $dids . ")) or";
                    }else{
                        $where .= " type = " . $dkey . "  and  did in (" . $dids . ")  ";
                    }
                }
                $where = rtrim($where,"or");
                if($count ==2)
                    $where = "(".$where.")";
            }
        }
        return $where;
    }

    //defence did
    protected function getDefenceIdByUid($user_id){
       // $defenceInfo = Defence::find()->where(['user_id'=>$user_id])->all();
        $sql = "select  id from {{%defence}} where user_id = ".$user_id;
        $defenceInfo = $this->conn->createCommand($sql)->queryAll();
        if(empty($defenceInfo)){
            $did = 0;
        }else{
            $did = [];
            foreach ($defenceInfo as $v){
                $did[] = $v['id'];
            }
        }
        return $did;
    }


    protected function roundData($data){
        return round($data* $this->multiple,2);
    }

}
